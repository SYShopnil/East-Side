// External Imports
import Head from 'next/head';
import { redirectTo500page } from '@src/utils/strapi';
import client from '@root/apollo-client';
import { PageBySlug } from '@src/query';
import { ArticleQuery } from '@src/query/articles';
import dynamic from 'next/dynamic';
import { ILayoutProps } from '@src/types/__layout';
import Loading from '@src/components/root/loading';
import { getFooterInfo, getGlobalInfo } from '@src/query/pages-data';
import { IPageProps } from '@src/types/pages/about';
import { IContext, IEvents } from '@src/types/pages';

const Events = dynamic<IEvents>(
  import('@src/components/pages/events').then((module) => module.Events),
  { loading: () => <Loading /> }
);
const Layout = dynamic<ILayoutProps>(
  import('@src/components/__layout').then((module) => module.Layout),
  { loading: () => <Loading /> }
);
const EventPage = ({
  pageInfo,
  globalInfo,
  footerInfo,
  blogData,
  locale,
  preview,
}: IPageProps) => {
  return (
    <>
      <Head>
        <title>EastSide | Event</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="robots" content="noindex,nofollow" />
        <meta name="googlebot" content="noindex" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout globalInfo={globalInfo} footerInfo={footerInfo} preview={preview}>
        <div>
          {/* The dynamic blocks will be rendered here */}
          <Events
            heroProps={pageInfo.block[0]}
            blogCarouselProps={blogData.articles.data}
            locale={locale}
          />
        </div>
      </Layout>
    </>
  );
};
export async function getStaticProps(context: IContext) {
  try {
    let { locale } = context;
    let pageInfo, globalInfo, footerInfo, blogData;
    if (!locale) locale = 'en';
    /* Page Data Fetch */
    const { data: pageData } = await client.query({
      query: PageBySlug('event', locale),
    });
    if (pageData.pages.data.length) {
      pageInfo = pageData.pages.data[0].attributes;
    } else {
      return redirectTo500page();
    }

    /* Articles Data Fetch for Carousel Block */
    const { data: articlesData } = await client.query({
      query: ArticleQuery(locale, 1, 10, '', ''),
    });
    if (articlesData) {
      blogData = articlesData;
    } else {
      return redirectTo500page();
    }

    /* Global Info Fetch */
    globalInfo = await getGlobalInfo(locale, client);
    /* Footer Info Fetch */
    footerInfo = await getFooterInfo(locale, client);
    if (!globalInfo || !footerInfo) return redirectTo500page();
    return {
      props: {
        pageInfo,
        globalInfo,
        footerInfo,
        blogData,
        locale,
        preview: context.preview || false,
      },
      revalidate: context.preview ? 1 : 120,
    };
  } catch (error) {
    return redirectTo500page();
  }
}
export default EventPage;
