import client from '@root/apollo-client';
import {
  GetAllPodcastShortDescription,
  GetAllPodcastSlug,
  GetPodcastDetailsBySlug,
} from '@src/query/podcasts';
import { redirectTo500page } from '@src/utils';
import Head from 'next/head';

import { useRouter } from 'next/router';
import { IContext, IPath } from '@src/types/pages';
import { getFooterInfo, getGlobalInfo } from '@src/query/pages-data';
import dynamic from 'next/dynamic';
import { ILayoutProps } from '@src/types/__layout';
import Loading from '@src/components/root/loading';
import { IPageProps } from '@src/types/pages/about';
import { IPathContext } from '@src/types/pages/page';

const SinglePodcast = dynamic<{ pageData: any }>(
  () => import('@src/components/pages/podcast')
);
const Layout = dynamic<ILayoutProps>(
  import('@src/components/__layout').then((module) => module.Layout),
  { loading: () => <Loading /> }
);
const PodcastSingle = ({
  globalInfo,
  footerInfo,
  pageInfo,
  preview,
}: IPageProps) => {
  const router = useRouter();
  if (router.isFallback) {
    return (
      <div className="container flex items-center h-screen">
        <Loading />
      </div>
    );
  }
  return (
    <>
      <Head>
        <title>Single Podcast</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="robots" content="noindex,nofollow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout globalInfo={globalInfo} footerInfo={footerInfo} preview={preview}>
        <SinglePodcast pageData={pageInfo} />
      </Layout>
    </>
  );
};

export async function getStaticPaths(context: IPathContext) {
  let { defaultLocale, locales } = context;
  const { data } = await client.query({
    query: GetAllPodcastSlug(defaultLocale),
  });
  const podcastSlugData =
    !!data.teamMembers?.data && !!data.teamMembers.data.length
      ? data.teamMembers.data
      : [];
  // generate the path array
  const paths: IPath[] = podcastSlugData.map(
    (ele: { attributes: { slug: string } }) =>
      locales.map((loc: string) => {
        return {
          params: { slug: ele?.attributes.slug },
          locale: loc,
        };
      })
  );
  return {
    paths: paths.flat(),
    fallback: true,
  };
}

export async function getStaticProps({
  params: { slug },
  locale,
  preview,
}: IContext) {
  try {
    let globalInfo, footerInfo, allPodcastShortInfo, podcastEpisodeInfo;
    if (!locale) locale = 'en';
    /* Page Data Fetch */
    const { data: podcastInfoResponse } = await client.query({
      query: GetPodcastDetailsBySlug(locale, slug),
    });
    if (podcastInfoResponse.podcasts.data.length) {
      podcastEpisodeInfo = podcastInfoResponse.podcasts.data[0];
      const { data: allPodcastShortInfoResponse } = await client.query({
        query: GetAllPodcastShortDescription(locale, slug),
      });
      allPodcastShortInfo = allPodcastShortInfoResponse;
    } else {
      return redirectTo500page();
    }
    /* Global Info Fetch */
    globalInfo = await getGlobalInfo(locale, client);
    /* Footer Info Fetch */
    footerInfo = await getFooterInfo(locale, client);
    if (!globalInfo || !footerInfo) return redirectTo500page();
    return {
      props: {
        globalInfo,
        footerInfo,
        pageInfo: {
          podcastEpisodeInfo,
          allPodcastShortInfo,
        },
        preview: preview || false,
      },
      revalidate: preview ? 1 : 120,
    };
  } catch (error) {
    return redirectTo500page();
  }
}
export default PodcastSingle;
