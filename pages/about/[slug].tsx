import { useRouter } from 'next/router';
import client from '@root/apollo-client';
import { redirectTo500page } from '@src/utils';
import { IPageProps } from '@src/types/pages/about';
import Head from 'next/head';
import {
  GetAllMemberData,
  GetAllMemberSlug,
  GetMemberBySlug,
  GetSingleMemberArticlesBySlug,
} from '@src/query/team-member';
import { IContext, IPath } from '@src/types/pages';
import { getFooterInfo, getGlobalInfo } from '@src/query/pages-data';
import dynamic from 'next/dynamic';
import { ILayoutProps } from '@src/types/__layout';
import Loading from '@src/components/root/loading';
import { IPathContext } from '@src/types/pages/page';

const MemberDetails = dynamic<{ pageData: any }>(
  import('@src/components/pages/teamMember').then(
    (module) => module.MemberDetails
  ),
  { loading: () => <Loading /> }
);
const Layout = dynamic<ILayoutProps>(
  import('@src/components/__layout').then((module) => module.Layout),
  { loading: () => <Loading /> }
);
const TeamMember = ({
  globalInfo,
  footerInfo,
  pageInfo,
  preview,
}: IPageProps) => {
  const router = useRouter();
  if (router.isFallback) {
    return (
      <div className="container flex items-center h-screen">
        <Loading />
      </div>
    );
  }
  return (
    <>
      <Head>
        <title>Team Member</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="robots" content="noindex,nofollow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout globalInfo={globalInfo} footerInfo={footerInfo} preview={preview}>
        <MemberDetails pageData={pageInfo} />
      </Layout>
    </>
  );
};

export async function getStaticPaths(context: IPathContext) {
  let { defaultLocale, locales } = context;
  const { data } = await client.query({
    query: GetAllMemberSlug(defaultLocale),
  });

  const MemberSlugData =
    !!data.teamMembers?.data && !!data.teamMembers.data.length
      ? data.teamMembers.data
      : [];

  //generate the path array
  const paths: IPath[] = MemberSlugData.map(
    (ele: { attributes: { slug: string } }) =>
      locales.map((loc: string) => {
        return {
          params: { slug: ele?.attributes.slug },
          locale: loc,
        };
      })
  );
  return {
    paths: paths.flat(),
    fallback: true,
  };
}

export async function getStaticProps(context: IContext) {
  try {
    let globalInfo, footerInfo, singleMemberInfo, articlesInfo, allMemberInfo;
    let {
      locale,
      params: { slug },
    } = context;
    if (!locale) locale = 'en';
    /* Page Data Fetch */
    const { data: memberInfoResponse } = await client.query({
      query: GetMemberBySlug(locale, slug),
    });
    if (memberInfoResponse.teamMembers.data.length) {
      const { data: articleDataResponse } = await client.query({
        query: GetSingleMemberArticlesBySlug(locale, slug),
      });
      const { data: allMemberInfoResponse } = await client.query({
        query: GetAllMemberData(locale),
      });
      singleMemberInfo = memberInfoResponse.teamMembers.data.length
        ? memberInfoResponse.teamMembers.data[0].attributes
        : null;
      articlesInfo = articleDataResponse;
      allMemberInfo = allMemberInfoResponse;
    } else {
      return redirectTo500page();
    }
    /* Global Info Fetch */
    globalInfo = await getGlobalInfo(locale, client);
    /* Footer Info Fetch */
    footerInfo = await getFooterInfo(locale, client);
    if (!globalInfo || !footerInfo) return redirectTo500page();
    return {
      props: {
        globalInfo,
        footerInfo,
        pageInfo: {
          memberData: singleMemberInfo,
          articlesInfo,
          allMemberInfo,
        },
        preview: context.preview || false,
      },
      revalidate: context.preview ? 1 : 120,
    };
  } catch (error) {
    return redirectTo500page();
  }
}

export default TeamMember;
