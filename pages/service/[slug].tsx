import client from '@root/apollo-client';
import Loading from '@src/components/root/loading';
import {
  getCaseStudyByCategory,
  getFooterInfo,
  getGlobalInfo,
  getServicesList,
} from '@src/query/pages-data';
import { ServiceBySlug, ServiceSlugsQuery } from '@src/query/service';
import { IContext } from '@src/types/pages';
import { IPageProps } from '@src/types/pages/about';
import { IPathContext } from '@src/types/pages/page';
import { ILayoutProps } from '@src/types/__layout';
import { redirectTo500page } from '@src/utils';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useRouter } from 'next/router';

const ServicePage = dynamic<{ pageData: any }>(
  () => import('@src/components/pages/service')
);
const Layout = dynamic<ILayoutProps>(
  import('@src/components/__layout').then((module) => module.Layout),
  { loading: () => <Loading /> }
);
const CaseStudy = ({
  pageInfo,
  globalInfo,
  footerInfo,
  caseStudies,
  servicesList,
  preview,
}: IPageProps) => {
  const router = useRouter();
  if (router.isFallback) {
    return (
      <div className="container flex items-center h-screen">
        <Loading />
      </div>
    );
  }
  // redecorate data
  const stringPageData = JSON.stringify(pageInfo);
  const parsedData = JSON.parse(stringPageData);
  parsedData.attributes?.block.map((ele: any, ind: number) => {
    if (ele.__typename === 'ComponentSliceCaseStudyCarouselBlock') {
      ele.caseStudies = caseStudies;
    }
    if (ele.__typename === 'ComponentSliceSliceServiceContentList') {
      ele.contentBlockList = servicesList;
    }
  });
  return (
    <>
      <Head>
        <title>EastSide | Case Study</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="robots" content="noindex,nofollow" />
        <meta name="googlebot" content="noindex" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout globalInfo={globalInfo} footerInfo={footerInfo} preview={preview}>
        <ServicePage pageData={parsedData} />
      </Layout>
    </>
  );
};

export async function getStaticPaths(context: IPathContext) {
  let { defaultLocale, locales } = context;
  // fetch all case study slugs
  const { data } = await client.query({
    query: ServiceSlugsQuery(defaultLocale),
  });
  const caseStudyData =
    !!data.services?.data && !!data.services.data.length
      ? data.services.data
      : [];
  const paths = caseStudyData.map((ele: { attributes: { slug: string } }) =>
    locales.map((loc: string) => {
      return {
        params: { slug: ele?.attributes.slug },
        locale: loc,
      };
    })
  );
  return {
    paths: paths.flat(),
    fallback: true,
  };
}
export async function getStaticProps(context: IContext) {
  let { locale } = context;
  let { slug } = context.params;
  let globalInfo, footerInfo, pageInfo, caseStudies, servicesList;
  if (!locale) locale = 'en';
  try {
    // Fetch case study data by slug
    const { data: serviceData } = await client.query({
      query: ServiceBySlug(locale, slug),
    });
    if (serviceData) {
      pageInfo = serviceData.services?.data[0];
    }
    /* Global Info Fetch */
    globalInfo = await getGlobalInfo(locale, client);
    /* Footer Info Fetch */
    footerInfo = await getFooterInfo(locale, client);
    // case studies data
    caseStudies = await getCaseStudyByCategory(
      locale,
      client,
      pageInfo.attributes?.block
    );
    // service list data by category
    servicesList = await getServicesList(
      locale,
      client,
      pageInfo.attributes?.block
    );
    if (!globalInfo || !footerInfo) return redirectTo500page();
    return {
      props: {
        pageInfo,
        globalInfo,
        footerInfo,
        caseStudies: !!caseStudies ? caseStudies.caseStudyLists : null,
        servicesList:
          !!servicesList && !!servicesList.length ? servicesList : null,
        preview: context.preview || false,
      },
      revalidate: context.preview ? 1 : 120,
    };
  } catch (error) {
    return redirectTo500page();
  }
}
export default CaseStudy;
